# === 보드 라벨 ===
board: "jetson_orin_nano"   # "raspberry_pi" | "jetson_orin_nano" | "tda4um"

# === 러너 공통 파라미터 ===
duration_sec: 60
warmup_sec: 5
payload_size: 2048  
send_rate: 200

# bench_client(HTTPS/DTLS용 C++ 바이너리) 경로
bench_client_path: "/opt/bench/bench_client"

# === 각 프로토콜의 서버/브로커/H3엔드포인트 ===
bench_server:
  https:
    host: "securityprotocol.store"
    port: 8000
    ca: "/opt/sec/ca.pem"
    cert: "/opt/sec/server.pem"
    key: "/opt/sec/server.key"
  dtls:
    host: "securityprotocol.store"
    port: 9001
    ca: "/opt/sec/ca.pem"
    cert: "/opt/sec/server.pem"
    key: "/opt/sec/server.key"
  mqtt:
    host: "securityprotocol.store"
    port: 8883
    ca: "/opt/sec/ca.pem"     # 선택
  http3:
    host: "securityprotocol.store"
    port: 8000
  coap:
    host: "securityprotocol.store"
    port: 5683

# === 테스트 매트릭스 : 프로토콜별 암호 알고리즘 목록 ===
# 아래 목록의 주석을 해제하여 원하는 프로토콜과 알고리즘을 테스트할 수 있습니다.
# aesgcm:    TLS_AES_128_GCM_SHA256
# aes256gcm: TLS_AES_256_GCM_SHA384
# chacha20:  TLS_CHACHA20_POLY1305_SHA256
# aesccm:    TLS_AES_128_CCM_SHA256
# aesccm8:   TLS_AES_128_CCM_8_SHA256
# coap의 oscore는 oscore_context에 설정된 알고리즘(기본: AES-CCM-16-64-128)을 사용합니다.
matrix:
  # https: ["aesgcm", "aes256gcm", "chacha20", ]
  # dtls:  ["aesgcm", "aes256gcm", "chacha20", ]
  mqtt:  ["aesgcm", "aes256gcm", "chacha20", ]
  # http3: ["aesgcm", "aes256gcm", "chacha20"]
  # coap:  ["plain", "oscore"]

# === YOLO 설정 ===
yolo:
  model_path: "yolo_model/yolo11n.pt"
  videos:
    Typical: "videos/video.webm"
